# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    image: asacx
    build:
      context: .
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - cache
    command: bash -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
  channel-master:
    image: asacx
    build:
      context: .
    volumes:
      - .:/app
    depends_on:
      - cache
    ports: [ ]
    command: watchmedo auto-restart --directory=/app --ignore-pattern=*sqlite3 --pattern=*.py --recursive -- python manage.py custom_runworker *
    environment:
      - CHANNELS_WORKER_MASTER=1
  channel-worker:
    extends:
      service: channel-master
    environment:
      - CHANNELS_WORKER_MASTER=0
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  cache:
    image: redis
    restart: on-failure
  
  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: django_password
      POSTGRES_USER: django_user
      POSTGRES_DB: django_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: on-failure

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
volumes:
  pgdata:
# secrets:
#   db-password:
#     file: db/password.txt
